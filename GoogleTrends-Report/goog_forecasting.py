# -*- coding: utf-8 -*-
"""GOOG_forecasting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z9GYDMSHBT7be855tKLif6yFiiN-WuGm

## **Part 1. Import Libraries**
"""

import pandas as pd
import numpy as np
from google.colab import files
import matplotlib.pyplot as plt

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.arima.model import ARIMA

pip install pmdarima

from pmdarima import auto_arima

"""## **Part 2. Upload Data**"""

uploaded = files.upload() #TrainingData #Years2010to2022

data = pd.read_csv("Google_Stock_Train (2010-2022).csv")
data.shape

"""## **Part 3. EDA**

"""

data.info()

data.head(10)

data.tail(10)

data.describe()

data.columns

data.dtypes

"""## **Part 4. Data Cleanup**"""

missing_values = data.isnull().sum()
duplicated = data.duplicated()

print(missing_values)
print(duplicated)

cleandata = data.dropna(axis = 1)
cleandata = cleandata.dropna(axis=0)
cleandata = cleandata.drop_duplicates()

print(cleandata.shape)

"""## **Part 5. DataViz**"""

data["Date"] = pd.to_datetime(data["Date"])
data["Year"] = data["Date"].dt.year

#Calculate the avg Highest/ avg Lowest stock price per year (2010-2022)
avg_yearlyH = data.groupby("Year")["High"].mean()
avg_yearlyL = data.groupby("Year")["Low"].mean()

for year in range(2010,2023):
  avgHigh = avg_yearlyH.get(year,0)
  avgLow = avg_yearlyL.loc[year]
  print(year,avgHigh, avgLow)

plt.figure(figsize =(10,6))
plt.plot(avg_yearlyH.index, avg_yearlyH, label = "Average High")
plt.plot(avg_yearlyL.index, avg_yearlyL, label = "Average Low")
plt.xlabel("Year")
plt.ylabel("Avg. Price")
plt.title("Average Price Trend GOOG: 2010-2022")
plt.legend()
plt.grid(True)
plt.show()

#Calculate the avg Volume per year (2010-2022)
avg_yearlyV = data.groupby("Year")["Volume"].mean()
for year in range(2010,2023):
  avgVol = avg_yearlyV.get(year,0)
  print(year,avgVol)

plt.figure(figsize =(10,6))
plt.plot(avg_yearlyV.index, avg_yearlyV, label = "Average Volume", )
plt.xlabel("Year")
plt.ylabel("Volume(in millions)")
plt.title("Average Volume Trend GOOG: 2010-2022")
plt.legend()
plt.grid(True)
plt.show()

"""## Part 6. Correlation Study"""

#Calculate the avg Price Change per year (2010-2022)
data["Price_Change"] = data["Close"] - data["Open"]
avg_yearlyPC = data.groupby("Year")["Price_Change"].mean()

for year in range(2010,2023):
  avgVol = avg_yearlyV.get(year,0)
  avgPC = avg_yearlyPC.loc[year]
  print(f"Year{year}: Volume{avgVol:.2f}: PriceChange{avgPC:.2f}")

plt.figure(figsize =(10,6))
plt.scatter(avg_yearlyV,avg_yearlyPC,alpha = 0.5)
plt.xlabel("Volume")
plt.ylabel("Price Change")
plt.title("Correlation b/w Volume & Price GOOG: 2010-2022")
plt.grid(True)
plt.show()

"""## **Part 7. Movering Averages**"""

uploaded = files.upload() #TestData #Year2023

data2 = pd.read_csv("Google_Stock_Test (2023).csv")
data2.shape

data2.head(10)

data2.tail(10)

data2["Date"] = pd.to_datetime(data2["Date"])

#Calculating Moving Average
days = 100
data2["100 Day Moving AVG"] = data2["Close"].rolling(window=days).mean()
data2.head()

data2.tail(10)

plt.figure(figsize =(10,6))
plt.plot(data2["Date"], data2["Close"], label = "Close Price" )
plt.plot(data2["Date"], data2["100 Day Moving AVG"], label = "100 Day Moving AVG" )
plt.xlabel("Date")
plt.ylabel("Price")
plt.title("Close Prices & 100 Day Moving AVG Trend GOOG:2023")
plt.legend()
plt.grid(True)
plt.show()

"""## **Part 8. Visualising Volatilty**"""

volatilty_days = 20
data2["Date"] = pd.to_datetime(data2["Date"])
data2["Price_Change"] = data2["Close"] - data2["Open"]
data2["Volatility"] = data2["Price_Change"].rolling(window=volatilty_days).std()

data2["Rolling Mean"] = data2["Close"].rolling(window=volatilty_days).mean()

data2["Upper BB"] = data2["Rolling Mean"]+ 2 * data2["Volatility"]
data2["Lower BB"] = data2["Rolling Mean"]- 2 * data2["Volatility"]

plt.figure(figsize =(10,6))
plt.plot(data2["Date"], data2["Close"], label = "Close Price" )
plt.plot(data2["Date"], data2["Upper BB"], label = "Upper Bollinger Band" )
plt.plot(data2["Date"], data2["Lower BB"], label = "Lower Bollinger Band" )
plt.xlabel("Date")
plt.ylabel("Price")
plt.title("Bollinger Band Trend GOOG: 2023")
plt.legend()
plt.grid(True)
plt.show()

"""## **Part 9. ARIMA Modeling**"""

#data.set_index("Date", inplace=True)
data.head() #TrainingData

model = auto_arima(data["Close"],seasonal = False,stepwise=True, suppress_warning = True, trace = True)

p,d,q = model.order
print(f"Optimal p value:{p}, d value:{d}, q value:{q}")

"""## **Part 10. Forecasting & Residual Analysis**"""

model = ARIMA(data["Close"],order =(p,d,q))
results = model.fit()

#Forecasting future prices

forecast_steps = 3
forecast, stderr, conf_int = results.forecast(steps= forecast_steps)

print("Forecasted Future Stock price is "+ " " + str(forecast))

residuals = data["Close"] - results.fittedvalues

print("ACF Plot for Residuals")
plot_acf(residuals, lags = 30);

print("PACF Plot for Residuals")
plot_pacf(residuals, lags = 30);

"""## **Part 11. Model Evaluation**"""

actualdata = data["Close"].iloc[-forecast_steps:]

#Mean Absolute Error
mae = np.mean(np.abs(actualdata-forecast))
print(mae)

#Mean Squared Error
mse = np.mean((actualdata-forecast)**2)
print(mse)

#Root Mean Squared Error
rmse = np.sqrt(mse)
print(rmse)